#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatapp:server');
var http = require('http');
var _ = require('underscore');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//Socket.io
var users_list = [];
io.on('connection', function(socket){
  var sessionId = socket.id;
  users_list.push({id:sessionId, name:'noName'});

  console.log('a new user connected : '+sessionId);
  io.emit('connected', users_list);

  socket.on('disconnect', function(){
    console.log('user disconnected');
    for(user in users_list){
      if(users_list[user].id == sessionId){
        console.log("delete "+sessionId);
        users_list = _.without(users_list, users_list[user]);         
        break;
      }
    }
    io.emit('disconnected', users_list);
  });
  
  socket.on('chatting', function(data) {    
    io.emit('chatting', data);
  });

  socket.on('notification', function(data) {     
    socket.broadcast.emit('notification', data);
  });

  socket.on('private', function(index, msg) {
    console.log(users_list[index]);
    socket.broadcast.to(users_list[index].id).emit('private msg', msg);
  });

  socket.on('change name', function(name){
    for(user in users_list){
      if(users_list[user].id == sessionId){
        users_list[user].name = name;
      }
    }
    io.emit('connected', users_list);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
